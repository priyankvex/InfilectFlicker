# Generated by Django 2.1.1 on 2018-09-25 05:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comment', models.TextField(help_text='Content of the comment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FlickerUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nsid', models.CharField(db_index=True, help_text='NSID of the user', max_length=100, unique=True)),
                ('real_name', models.CharField(help_text='Real name of the user', max_length=100)),
                ('location', models.CharField(help_text='Location of the user', max_length=100)),
                ('path_alias', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nsid', models.CharField(db_index=True, help_text='NSID of the group', max_length=100, unique=True)),
                ('name', models.CharField(help_text='Name of the group', max_length=100)),
                ('description', models.TextField(help_text='Description of the group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('note', models.TextField(help_text='Content of the note')),
                ('flicker_user', models.ForeignKey(help_text='Flicker user who made this note', on_delete=django.db.models.deletion.CASCADE, to='photos.FlickerUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nsid', models.CharField(db_index=True, help_text='NSID of the photo', max_length=100, unique=True)),
                ('uploaded_on', models.DateTimeField(help_text='Datetime at which this picture was uploaded')),
                ('taken_on', models.DateTimeField(help_text='Datetime at which this picture was taken')),
                ('license', models.CharField(choices=[('0', 'PUBLIC'), ('1', 'PRIVATE')], max_length=2)),
                ('title', models.CharField(help_text='Title of the picture', max_length=1000)),
                ('description', models.TextField(help_text='Description of the photo')),
                ('is_favorite', models.BooleanField(default=False, help_text='Is this photo marked as favorite?')),
                ('is_public', models.BooleanField(default=False, help_text='Is this photo public?')),
                ('is_friend', models.BooleanField(default=False, help_text='Is this photo friend only?')),
                ('is_family', models.BooleanField(default=False, help_text='Is this photo family only?')),
                ('views', models.PositiveIntegerField(default=0, help_text='Number of views on this photo')),
                ('can_comment', models.BooleanField(default=True, help_text='Can flickr users comment on this picture?')),
                ('can_add_meta', models.BooleanField(default=True, help_text='Can flickr users add meta content for this picture?')),
                ('can_add_meta_public', models.BooleanField(default=False, help_text='Can the world  add meta content for this picture?')),
                ('can_download', models.BooleanField(default=True, help_text='Can this picture be downloaded?')),
                ('can_blog', models.BooleanField(default=True, help_text='Can this picture be blogged?')),
                ('can_share', models.BooleanField(default=True, help_text='Can this picture be shared?')),
                ('media', models.CharField(help_text='Type of the media', max_length=10)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='photos.Group')),
                ('owner', models.ForeignKey(help_text='Flicker user which owns this photo', on_delete=django.db.models.deletion.CASCADE, to='photos.FlickerUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tag_id', models.CharField(db_index=True, help_text='Verbose tag id', max_length=256, unique=True)),
                ('tag_name', models.CharField(help_text='Name of the tab', max_length=50)),
                ('created_by', models.ForeignKey(help_text='Flicker user who created this tag', on_delete=django.db.models.deletion.CASCADE, to='photos.FlickerUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='photo',
            name='tags',
            field=models.ManyToManyField(help_text='Tags for this photo', to='photos.Tag'),
        ),
        migrations.AddField(
            model_name='note',
            name='photo',
            field=models.ForeignKey(help_text='Photo this note belongs too', on_delete=django.db.models.deletion.CASCADE, to='photos.Photo'),
        ),
        migrations.AddField(
            model_name='flickeruser',
            name='groups',
            field=models.ManyToManyField(help_text='Groups this user belongs too', to='photos.Group'),
        ),
        migrations.AddField(
            model_name='flickeruser',
            name='user',
            field=models.OneToOneField(help_text='User related to the flicker user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='commented_by',
            field=models.ForeignKey(help_text='Flicker user who made this comment', on_delete=django.db.models.deletion.CASCADE, to='photos.FlickerUser'),
        ),
        migrations.AddField(
            model_name='comment',
            name='photo',
            field=models.ForeignKey(help_text='The photo on which the comment was made', on_delete=django.db.models.deletion.CASCADE, to='photos.Photo'),
        ),
    ]
